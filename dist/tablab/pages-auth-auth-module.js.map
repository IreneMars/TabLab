{"version":3,"sources":["./src/app/pages/auth/signup/signup.component.ts","./src/app/pages/auth/signup/signup.component.html","./src/app/pages/auth/auth-routing.module.ts","./src/app/pages/auth/login/login.component.ts","./src/app/pages/auth/login/login.component.html","./node_modules/angularx-social-login/__ivy_ngcc__/fesm2015/angularx-social-login.js","./src/app/pages/auth/auth.module.ts"],"names":[],"mappings":"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AwC;gBACxC,sBAAsB;gBACtB,uDAAuD;gBACvD,oCAAoC;gBACpC,MAAM;gBACN,mCAAmC;gBACnC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aAC1B;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;aACnC;QACH,CAAC;KAAA;IAEC,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC;;4EAhHU,cAAc;8FAAd,cAAc;QCnB3B,0HAA6C;QAC7C,2GA2CM;;QA5CQ,+EAAe;QACN,0DAAgB;QAAhB,gFAAgB;;;;;;;;;;;;;;ACDvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AAC9B;AACJ;AACb;;AAEM;AACxC;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC,iBAAiB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,sBAAsB,2BAA2B;AACpI;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAa;AAC3C;AACA;AACA,8BAA8B,iDAAY;AAC1C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gEAAgE,qCAAqC,sDAAe,6BAA6B;AACjJ,0BAA0B,gEAAyB,EAAE,4DAA4D;AACjH;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,sCAAsC;AACxF;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,sDAAe,yBAAyB;AAC7I,yBAAyB,8DAAuB,EAAE,0BAA0B;AAC5E,yBAAyB,8DAAuB,EAAE;AAClD;AACA;AACA,YAAY,4DAAY;AACxB,YAAY;AACZ;AACA,KAAK,wCAAwC,OAAO,sDAAQ,EAAE,GAAG,OAAO,sDAAQ,EAAE;AAClF;AACA,cAAc,oDAAoD,gEAAyB,qBAAqB,uBAAuB,SAAS,4DAAY,EAAE,EAAE,EAAE,EAAE,EAAE;AACtK,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,QAAQ,EAAE;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,MAAM;AACX;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,wBAAwB;AACrH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,kEAAkE,kCAAkC;AACpG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,8DAA8D,gCAAgC;AAC9F;AACA,SAAS;AACT;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gCAAgC,gCAAgC;AAChE;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oDAAoD,GAAG,QAAQ;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB,GAAG,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,iBAAiB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,0BAA0B;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6DAA6D,mCAAmC;AAChG;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAE6M;;AAE7M,iD;;;;;;;;;;;;AC72BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACmB;AAET;AACG;AACY;AACd;AACc;AACzB;AACyD;;AAgCjG,MAAM,UAAU;;oEAAV,UAAU;yFAAV,UAAU;8FAlBV;QACT;YACE,OAAO,EAAE,yBAAyB;YAClC,QAAQ,EAAE;gBACR,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE;oBACT;wBACE,EAAE,EAAE,yEAAmB,CAAC,WAAW;wBACnC,QAAQ,EAAE,IAAI,yEAAmB,CAC/B,0EAA0E,CAC3E;qBACF;iBACF;aACyB;SAC7B;KACF,YAzBQ;YACP,4DAAY;YACZ,qFAAqB;YACrB,0DAAW;YACX,sEAAiB;YACjB,kEAAmB;YACnB,4DAAY;YACZ,qFAAgB;YAChB,uEAAiB;SAClB;mIAmBU,UAAU,mBA7BN,qEAAc,EAAE,wEAAe,aAE5C,4DAAY;QACZ,qFAAqB;QACrB,0DAAW;QACX,sEAAiB;QACjB,kEAAmB;QACnB,4DAAY;QACZ,qFAAgB;QAChB,uEAAiB","file":"pages-auth-auth-module.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { WorkspacesService } from '../../../services/workspaces.service';\r\nimport { UsersService } from '../../../services/users.service';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit, OnDestroy{\r\n  isLoading = false;\r\n  signupForm: FormGroup;\r\n  private authStatusSub: Subscription;\r\n\r\n  constructor( public authService: AuthService, public usersService: UsersService, private formBuilder: FormBuilder, \r\n               private router: Router, public workspacesService: WorkspacesService ) {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.signupForm = this.formBuilder.group({\r\n      username       : ['', [Validators.required, Validators.minLength(5)]],\r\n      email          : ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9._]+\\.[a-z]{2,3}$')]],\r\n      password       : ['', Validators.required],\r\n      // rememberme     : [false]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe( authStatus => {\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n\r\n  get invalidUsername() {\r\n    return this.signupForm.get('username').invalid && this.signupForm.get('username').touched;\r\n  }\r\n\r\n  get invalidEmail() {\r\n    return this.signupForm.get('email').invalid && this.signupForm.get('email').touched;\r\n  }\r\n\r\n  get invalidPassword() {\r\n    return this.signupForm.get('password').invalid;\r\n  }\r\n\r\n  async onSignup() {\r\n    if (this.signupForm.invalid){\r\n      return Object.values(this.signupForm.controls).forEach(control => {\r\n        if (control instanceof FormGroup) {\r\n          Object.values(control.controls).forEach( control => control.markAsTouched());\r\n        } else {\r\n          control.markAsTouched();\r\n        }\r\n      });\r\n    }\r\n    this.isLoading = true;\r\n    const values = this.signupForm.getRawValue();\r\n    this.usersService.addUser(values.username, values.email, values.password)\r\n    .then(()=>{\r\n      this.router.navigate(['/']);\r\n    })\r\n    .catch(err=>{\r\n      console.log(\"Error on onSignUp() method: \"+err)\r\n    });\r\n  }\r\n}\r\n\r\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n<div class=\"row justify-content-sm-center mt-5\" *ngIf=\"!isLoading\">\r\n    <div class=\"col-sm-auto\">\r\n        <div class=\"card animate__animated animate__fadeIn animate__faster\">\r\n            <div class=\"card-body\">\r\n                <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSignup()\">\r\n                    <h2 class=\"card-title\">Registro</h2>\r\n                    <mat-form-field>\r\n                        <input matInput type=\"text\" placeholder=\"Nombre\" formControlName=\"username\" [class.is-invalid]=\"invalidUsername\">\r\n                        <mat-error>\r\n                            <small *ngIf=\"invalidUsername\" class=\"text-danger\">\r\n                              Ingrese un nombre de usuario adecuado (mayor de 5 letras).\r\n                            </small>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <input matInput type=\"email\" placeholder=\"Correo electrónico\" formControlName=\"email\" [class.is-invalid]=\"invalidEmail\">\r\n                        <mat-error>\r\n                            <small *ngIf=\"invalidEmail\" class=\"text-danger\">\r\n                              Ingrese un correo adecuado\r\n                            </small>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <mat-form-field>\r\n                        <input matInput type=\"password\" placeholder=\"Contraseña\" formControlName=\"password\" [class.is-invalid]=\"invalidPassword\">\r\n                        <mat-error>\r\n                            <small *ngIf=\"invalidPassword\" class=\"text-danger\">\r\n                              Ingrese una contraseña adecuada\r\n                            </small>\r\n                        </mat-error>\r\n                    </mat-form-field>\r\n\r\n                    <div class=\"d-grid gap-2\">\r\n                        <button type=\"submit\" class=\"mt-3 btn btn-primary btn-block\" *ngIf=\"!isLoading\">Registrar</button>\r\n                    </div>\r\n                    <div class=\"text-center mt-3\">\r\n                        <a routerLink=\"/auth/login\">\r\n                        ¿Ya tienes una cuenta?\r\n                      </a>\r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'signup', component: SignupComponent },\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { OnDestroy, OnInit } from '@angular/core';\r\nimport { Component } from '@angular/core';\r\nimport { ReplaySubject, Subscription, Observable } from 'rxjs';\r\n\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { SocialAuthService, SocialUser } from 'angularx-social-login';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nexport class User {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  loginForm: FormGroup;\r\n  isLoading = false;\r\n  url: RequestInfo;\r\n  private authStatusSub: Subscription;\r\n  user: SocialUser;\r\n  loggedIn: boolean;\r\n\r\n  private auth2: gapi.auth2.GoogleAuth;\r\n  private subject = new ReplaySubject<gapi.auth2.GoogleUser>(1);\r\n\r\n  constructor( public authService: AuthService, private formBuilder: FormBuilder, private socialAuthService: SocialAuthService ) {\r\n    this.createForm();\r\n    gapi.load('auth2', () => {\r\n      gapi.auth2.init({\r\n        client_id: '303403440470-rllj320ep4gefudqkscfovdm7qug9ebd.apps.googleusercontent.com'\r\n      });\r\n    });\r\n  }\r\n\r\n  createForm() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username       : ['', [Validators.required, Validators.minLength(4)]],\r\n      // email          : ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9._]+\\.[a-z]{2,3}$')]],\r\n      password       : ['', Validators.required],\r\n      rememberme     : [false]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe( authStatus => {\r\n      this.isLoading = false;\r\n    });\r\n    if  (localStorage.getItem('email')) {\r\n      this.loginForm.reset({\r\n        username: localStorage.getItem('username'),\r\n        // email: localStorage.getItem('email'),\r\n        rememberme: true,\r\n      });\r\n\r\n    }\r\n    this.url = (window.location.hostname.includes('localhost')) ?\r\n                            'http://localhost:3000/api/users/google' :\r\n                            'https://restserver-curso-fher.herokuapp.com/api/auth/google';\r\n    this.socialAuthService.authState.subscribe((user) => {\r\n      this.user = user;\r\n      this.loggedIn = (user != null);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.authStatusSub.unsubscribe();\r\n  }\r\n\r\n  get invalidUsername() {\r\n    return this.loginForm.get('username').invalid && this.loginForm.get('username').touched;\r\n  }\r\n\r\n  get invalidEmail() {\r\n    return this.loginForm.get('email').invalid && this.loginForm.get('email').touched;\r\n  }\r\n\r\n  get invalidPassword() {\r\n    return this.loginForm.get('password').invalid;\r\n  }\r\n\r\n  onLogin() {\r\n    if (this.loginForm.invalid){\r\n      return Object.values(this.loginForm.controls).forEach(control => {\r\n        if (control instanceof FormGroup) {\r\n          \r\n          Object.values(control.controls).forEach( control => control.markAsTouched());\r\n        } else {\r\n          control.markAsTouched();\r\n        }\r\n      });\r\n    }\r\n    this.isLoading = true;\r\n    const values = this.loginForm.getRawValue();\r\n    this.authService.login(values.username, values.password);\r\n    if  (values.rememberme) {\r\n      localStorage.setItem('username', values.username);\r\n    } else {\r\n      localStorage.removeItem('username');\r\n    }\r\n    this.isLoading = false;\r\n  }\r\n\r\n  async onGoogleLogin(){\r\n    this.auth2 = gapi.auth2.getAuthInstance();\r\n    this.isLoading = true;\r\n\r\n    if (!this.auth2.isSignedIn.get()){\r\n      await this.auth2.signIn();\r\n      const id_token = this.auth2.currentUser.get().getAuthResponse().id_token;\r\n      const data1 = { id_token };\r\n      this.authService.googleLogin(id_token);\r\n\r\n      // const resp = await fetch( this.url, {\r\n      //     method: 'POST',\r\n      //     headers: { 'Content-Type': 'application/json' },\r\n      //     body: JSON.stringify( data1 )\r\n      // });\r\n      // const data2 = await resp.json();\r\n      this.isLoading = false;\r\n  } else {\r\n    console.log('Already signed in!');\r\n  }\r\n}\r\n\r\n  observable(): Observable<gapi.auth2.GoogleUser>{\r\n    return this.subject.asObservable();\r\n  }\r\n\r\n}\r\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n<div class=\"row mt-5\" *ngIf=\"!isLoading\">\r\n    <div class=\"col d-flex justify-content-md-center\">\r\n        <div style=\"min-width: 30%;\">\r\n            <div class=\"card animate__animated animate__fadeIn animate__faster\">\r\n                <div class=\"card-body\">\r\n                    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\r\n                        <h2 class=\"card-title\">Inicio de Sesión</h2>\r\n                        <mat-form-field>\r\n                            <input matInput type=\"text\" placeholder=\"Nombre\" formControlName=\"username\" [class.is-invalid]=\"invalidUsername\">\r\n                            <mat-error>\r\n                                <small *ngIf=\"invalidUsername\" class=\"text-danger\">\r\n                                  Ingrese 5 letras\r\n                                </small>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <mat-form-field>\r\n                            <input matInput type=\"password\" placeholder=\"Contraseña\" formControlName=\"password\" [class.is-invalid]=\"invalidPassword\">\r\n                            <mat-error>\r\n                                <small *ngIf=\"invalidPassword\" class=\"text-danger\">\r\n                              Ingrese una contraseña adecuada\r\n                            </small>\r\n                            </mat-error>\r\n                        </mat-form-field>\r\n                        <div class=\"flex-sb-m w-full p-t-3 p-b-24\">\r\n                            <div class=\"contact100-form-checkbox\">\r\n                                <mat-checkbox class=\"example-margin mt-2\" formControlName=\"rememberme\">Recordar mi usuario</mat-checkbox>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"text-center mt-3\">\r\n                            <a routerLink=\"/auth/signup\">\r\n                              ¿No tienes cuenta?\r\n                            </a>\r\n                        </div>\r\n                        <div class=\"d-grid gap-2\">\r\n                            <button type=\"submit\" class=\"mt-3 btn btn-primary btn-block\" *ngIf=\"!isLoading\">Iniciar Sesión</button>\r\n                        </div>\r\n                    </form>\r\n                    <div class=\"d-grid gap-2 mt-1\">\r\n                        <button type=\"button\" (click)=\"onGoogleLogin()\" class=\"btn btn-primary\">Sign In with Google</button></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nimport * as ɵngcc0 from '@angular/core';\nclass BaseLoginProvider {\n    constructor() { }\n    loadScript(id, src, onload, parentElement = null) {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            let signInJS = document.createElement('script');\n            signInJS.async = true;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            if (!parentElement) {\n                parentElement = document.head;\n            }\n            parentElement.appendChild(signInJS);\n        }\n    }\n}\n\nclass SocialUser {\n}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = { scope: 'email' }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n                    gapi.load('auth2', () => {\n                        this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }));\n                        this.auth2\n                            .then(() => {\n                            resolve();\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus(loginStatusOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n        return new Promise((resolve, reject) => {\n            if (this.auth2.isSignedIn.get()) {\n                let user = new SocialUser();\n                const profile = this.auth2.currentUser.get().getBasicProfile();\n                const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n                user.id = profile.getId();\n                user.name = profile.getName();\n                user.email = profile.getEmail();\n                user.photoUrl = profile.getImageUrl();\n                user.firstName = profile.getGivenName();\n                user.lastName = profile.getFamilyName();\n                user.response = authResponse;\n                const resolveUser = authResponse => {\n                    user.authToken = authResponse.access_token;\n                    user.idToken = authResponse.id_token;\n                    resolve(user);\n                };\n                if (options.refreshToken) {\n                    this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n                }\n                else {\n                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    resolveUser(authResponse);\n                }\n            }\n            else {\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            const offlineAccess = options && options.offline_access;\n            let promise = !offlineAccess\n                ? this.auth2.signIn(signInOptions)\n                : this.auth2.grantOfflineAccess(signInOptions);\n            promise\n                .then((response) => {\n                let user = new SocialUser();\n                if (response && response.code) {\n                    user.authorizationCode = response.code;\n                }\n                else {\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\n                    let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    let token = authResponse.access_token;\n                    let backendToken = authResponse.id_token;\n                    user.id = profile.getId();\n                    user.name = profile.getName();\n                    user.email = profile.getEmail();\n                    user.photoUrl = profile.getImageUrl();\n                    user.firstName = profile.getGivenName();\n                    user.lastName = profile.getFamilyName();\n                    user.authToken = token;\n                    user.idToken = backendToken;\n                    user.response = authResponse;\n                }\n                resolve(user);\n            }, (closed) => {\n                reject(closed);\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            let signOutPromise;\n            if (revoke) {\n                signOutPromise = this.auth2.disconnect();\n            }\n            else {\n                signOutPromise = this.auth2.signOut();\n            }\n            signOutPromise\n                .then((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config) {\n        this.providers = new Map();\n        this.autoLogin = false;\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n        this.initialized = false;\n        this._initState = new AsyncSubject();\n        if (config instanceof Promise) {\n            config.then((config) => {\n                this.initialize(config);\n            });\n        }\n        else {\n            this.initialize(config);\n        }\n    }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState() {\n        return this._initState.asObservable();\n    }\n    initialize(config) {\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        const { onError = console.error } = config;\n        config.providers.forEach((item) => {\n            this.providers.set(item.id, item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize()))\n            .then(() => {\n            if (this.autoLogin) {\n                const loginStatusPromises = [];\n                let loggedIn = false;\n                this.providers.forEach((provider, key) => {\n                    let promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise\n                        .then((user) => {\n                        user.provider = key;\n                        this._user = user;\n                        this._authState.next(user);\n                        loggedIn = true;\n                    })\n                        .catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n        })\n            .catch((error) => {\n            onError(error);\n        })\n            .finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    refreshAuthToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .getLoginStatus({ refreshToken: true })\n                        .then((user) => {\n                        user.provider = providerId;\n                        this._user = user;\n                        this._authState.next(user);\n                        resolve();\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId, signInOptions) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signIn(signInOptions)\n                        .then((user) => {\n                        user.provider = providerId;\n                        resolve(user);\n                        this._user = user;\n                        this._authState.next(user);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (!this._user) {\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                let providerId = this._user.provider;\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signOut(revoke)\n                        .then(() => {\n                        resolve();\n                        this._user = null;\n                        this._authState.next(null);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n}\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) { return new (t || SocialAuthService)(ɵngcc0.ɵɵinject('SocialAuthServiceConfig')); };\nSocialAuthService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SocialAuthService, factory: SocialAuthService.ɵfac });\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: ['SocialAuthServiceConfig',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SocialAuthService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: ['SocialAuthServiceConfig']\n            }] }]; }, null); })();\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                SocialAuthService,\n                {\n                    provide: 'SocialAuthServiceConfig',\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) { return new (t || SocialLoginModule)(ɵngcc0.ɵɵinject(SocialLoginModule, 12)); };\nSocialLoginModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SocialLoginModule });\nSocialLoginModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        SocialAuthService\n    ], imports: [[\n            CommonModule\n        ]] });\nSocialLoginModule.ctorParameters = () => [\n    { type: SocialLoginModule, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SocialLoginModule, { imports: function () { return [CommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SocialLoginModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                providers: [\n                    SocialAuthService\n                ]\n            }]\n    }], function () { return [{ type: SocialLoginModule, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, null); })();\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n    constructor(dummy) {\n        super();\n        if (dummy) {\n            this.dummy = dummy;\n        }\n        else {\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\n        }\n        // Start not logged in\n        this.loggedIn = false;\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this.loggedIn) {\n                resolve(this.dummy);\n            }\n            else {\n                reject('No user is currently logged in.');\n            }\n        });\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    }\n    signIn() {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = true;\n            resolve(this.dummy);\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = false;\n            resolve();\n        });\n    }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        scope: 'email,public_profile',\n        locale: 'en_US',\n        fields: 'name,email,picture,first_name,last_name',\n        version: 'v4.0',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.initOptions.locale}/sdk.js`, () => {\n                    FB.init({\n                        appId: this.clientId,\n                        autoLogAppEvents: true,\n                        cookie: true,\n                        xfbml: true,\n                        version: this.initOptions.version,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                if (response.status === 'connected') {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${this.initOptions.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal&access_token=' +\n                                authResponse.accessToken;\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n                }\n            });\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.authResponse) {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal';\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject('User cancelled login or did not fully authorize.');\n                }\n            }, options);\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            FB.logout((response) => {\n                resolve();\n            });\n        });\n    }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        scope: 'profile',\n        scope_data: {\n            profile: { essential: false },\n        },\n        redirect_uri: location.origin,\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        let amazonRoot = null;\n        if (document) {\n            amazonRoot = document.createElement('div');\n            amazonRoot.id = 'amazon-root';\n            document.body.appendChild(amazonRoot);\n        }\n        window.onAmazonLoginReady = () => {\n            amazon.Login.setClientId(this.clientId);\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n                    resolve();\n                }, amazonRoot);\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            let token = this.retrieveToken();\n            if (token) {\n                amazon.Login.retrieveProfile(token, (response) => {\n                    if (response.success) {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.response = response.profile;\n                        resolve(user);\n                    }\n                    else {\n                        reject(response.error);\n                    }\n                });\n            }\n            else {\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            amazon.Login.authorize(options, (authResponse) => {\n                if (authResponse.error) {\n                    reject(authResponse.error);\n                }\n                else {\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.authToken = authResponse.access_token;\n                        user.response = response.profile;\n                        this.persistToken(authResponse.access_token);\n                        resolve(user);\n                    });\n                }\n            });\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            try {\n                amazon.Login.logout();\n                this.clearToken();\n                resolve();\n            }\n            catch (err) {\n                reject(err.message);\n            }\n        });\n    }\n    persistToken(token) {\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n    retrieveToken() {\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n    clearToken() {\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        fields: 'photo_max,contacts',\n        version: '5.124',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\n        this.VK_API_GET_USER = 'users.get';\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n                    VK.init({\n                        apiId: this.clientId,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n    }\n    signIn() {\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            VK.Auth.logout((response) => {\n                resolve();\n            });\n        });\n    }\n    signInInternal(resolve, reject) {\n        VK.Auth.login((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    getUser(userId, token, resolve) {\n        VK.Api.call(this.VK_API_GET_USER, {\n            user_id: userId,\n            fields: this.initOptions.fields,\n            v: this.initOptions.version,\n        }, (userResponse) => {\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\n        });\n    }\n    getLoginStatusInternal(resolve, reject) {\n        VK.Auth.getLoginStatus((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    createUser(response) {\n        const user = new SocialUser();\n        user.id = response.id;\n        user.name = `${response.first_name} ${response.last_name}`;\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n    }\n}\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = {\n            authority: COMMON_AUTHORITY,\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\n            knownAuthorities: [],\n            protocolMode: ProtocolMode.AAD,\n            clientCapabilities: [],\n            cacheLocation: 'sessionStorage'\n        };\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n                var _a;\n                try {\n                    const config = {\n                        auth: {\n                            clientId: this.clientId,\n                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                            authority: this.initOptions.authority,\n                            knownAuthorities: this.initOptions.knownAuthorities,\n                            protocolMode: this.initOptions.protocolMode,\n                            clientCapabilities: this.initOptions.clientCapabilities\n                        },\n                        cache: !this.initOptions.cacheLocation ? null : {\n                            cacheLocation: this.initOptions.cacheLocation\n                        }\n                    };\n                    this._instance = new msal.PublicClientApplication(config);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    getSocialUser(loginResponse) {\n        return new Promise((resolve, reject) => {\n            //After login, use Microsoft Graph API to get user info\n            let meRequest = new XMLHttpRequest();\n            meRequest.onreadystatechange = () => {\n                if (meRequest.readyState == 4) {\n                    try {\n                        if (meRequest.status == 200) {\n                            let userInfo = JSON.parse(meRequest.responseText);\n                            let user = new SocialUser();\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                            user.id = loginResponse.idToken;\n                            user.authToken = loginResponse.accessToken;\n                            user.name = loginResponse.idTokenClaims.name;\n                            user.email = loginResponse.account.username;\n                            user.idToken = loginResponse.idToken;\n                            user.response = loginResponse;\n                            user.firstName = userInfo.givenName;\n                            user.lastName = userInfo.surname;\n                            resolve(user);\n                        }\n                        else {\n                            reject(`Error retrieving user info: ${meRequest.status}`);\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                }\n            };\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n            try {\n                meRequest.send();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                const loginResponse = yield this._instance.ssoSilent({\n                    scopes: this.initOptions.scopes,\n                    loginHint: accounts[0].username\n                });\n                return yield this.getSocialUser(loginResponse);\n            }\n            else {\n                throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n            }\n        });\n    }\n    signIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const loginResponse = yield this._instance.loginPopup({\n                scopes: this.initOptions.scopes\n            });\n            return yield this.getSocialUser(loginResponse);\n        });\n    }\n    signOut(revoke) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                yield this._instance.logoutPopup({\n                    account: accounts[0],\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n                });\n            }\n        });\n    }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n\n//# sourceMappingURL=angularx-social-login.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { AngularMaterialModule } from 'src/app/angular-material.module';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { ComponentsModule } from 'src/app/components/components.module';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SocialLoginModule, GoogleLoginProvider, SocialAuthServiceConfig } from 'angularx-social-login';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, SignupComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AngularMaterialModule,\r\n    FormsModule,\r\n    AuthRoutingModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    ComponentsModule,\r\n    SocialLoginModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: 'SocialAuthServiceConfig',\r\n      useValue: {\r\n        autoLogin: false,\r\n        providers: [\r\n          {\r\n            id: GoogleLoginProvider.PROVIDER_ID,\r\n            provider: new GoogleLoginProvider(\r\n              '303403440470-rllj320ep4gefudqkscfovdm7qug9ebd.apps.googleusercontent.com'\r\n            )\r\n          }\r\n        ]\r\n      } as SocialAuthServiceConfig,\r\n    }\r\n  ]\r\n\r\n})\r\nexport class AuthModule {}\r\n"],"sourceRoot":"webpack:///"}